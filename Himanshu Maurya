https://leetcode.com/problems/search-in-rotated-sorted-array/

//IN JAVA BY HIMANSHU MAURYA

class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int low = 0;
        int high = n-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(nums[mid]==target)return mid;
            if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<nums[mid]){
                    high = mid-1;
                }else{
                    low = mid+1;
                }
            }else{
                if(target>nums[mid] && target<=nums[high]){
                    low = mid+1;
                }else{
                    high = mid-1;
                }
            }
        }
        return -1;
    }
}

//Time Complexity : O(log N)
//Space Complexity : O(1)

https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

class Solution {
    public boolean search(int[] nums, int target) {
        int n = nums.length;
        int low = 0;
        int high = n-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(nums[mid]==target) return true;
            if(nums[mid]==nums[low] && nums[mid]==nums[high])low++;
            else if(nums[mid]<nums[low]){
                if(target > nums[mid] && target<=nums[high]){
                    low = mid+1;
                }else{
                    high = mid;
                }
            }else{
                if(target>=nums[low] && target<nums[mid]){
                    high = mid;
                }else{
                    low = mid+1;
                }
            }
        }
        return false;
    }
}


//Time Complexity : O(log N) in worst case It can go to O(N) if all element is equal

//Space Complexity : O(1)

https://leetcode.com/problems/find-peak-element/

class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        if(n==1)return 0;
        int low = 0;
        int high = n-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if((mid == 0 || nums[mid]>nums[mid-1]) && (mid ==n-1 || nums[mid]>nums[mid+1])){
                return mid;
            }else if( nums[mid+1]>nums[mid]){
                low=mid+1;
            }else{
                high = mid-1;
            }
        }
        return -1;
    }
}

//Time Complexity : O(log N)
//Space Complexity : O(1)
